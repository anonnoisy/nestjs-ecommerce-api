// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  firstName String
  lastName  String?
  email     String   @unique
  phone     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerAddresses CustomerAddress[]
  customerPayments  CustomerPayment[]
  cart              Cart?
  order             Order?
}

model CustomerAddress {
  id        String   @id @default(uuid())
  userId    String
  address   String
  city      String
  state     String
  zip       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      Customer @relation(fields: [userId], references: [id])
}

model CustomerPayment {
  id         String   @id @default(uuid())
  userId     String
  provider   String
  cardNumber String
  cardHolder String
  expMonth   String
  expYear    String
  cvv        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       Customer @relation(fields: [userId], references: [id])
}

model ProductCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
}

model ProductInventory {
  id          Int      @id @default(autoincrement())
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product Product?
}

model ProductDiscount {
  id               Int      @id @default(autoincrement())
  name             String
  discount_percent Int
  active           Boolean
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  products Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  imageUrl    String
  name        String
  desc        String
  SKU         String
  categoryId  Int
  inventoryId Int?
  price       Decimal
  discountId  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productCategory  ProductCategory @relation(fields: [categoryId], references: [id])
  productInventory ProductInventory? @relation(fields: [inventoryId], references: [id])
  productDiscount  ProductDiscount? @relation(fields: [discountId], references: [id])
  cartItem         CartItem?
  orderItem        OrderItem?
}

model Cart {
  id         Int      @id @default(autoincrement())
  customerId String
  total      Decimal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer   Customer    @relation(fields: [customerId], references: [id])
  cartItems  CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

enum PaymentStatus {
  UNPAID
  PAID
}

model PaymentDetail {
  id        String        @id @default(uuid())
  orderId   String
  amount    Decimal
  provider  String
  status    PaymentStatus @default(UNPAID)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  order     Order?
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}

model Order {
  id         Int        @id @default(autoincrement())
  customerId String
  total      Decimal
  paymentId  String?
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  orderItems    OrderItem[]
  customer      Customer       @relation(fields: [customerId], references: [id])
  paymentDetail PaymentDetail? @relation(fields: [paymentId], references: [id])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}